import ts from "typescript";
import { NEVER, addJSDocComment, tsModifiers, tsPropertyIndex, } from "../lib/ts.js";
import { createRef, debug, getEntries } from "../lib/utils.js";
import transformHeaderObject from "./header-object.js";
import transformParameterObject from "./parameter-object.js";
import transformPathItemObject from "./path-item-object.js";
import transformRequestBodyObject from "./request-body-object.js";
import transformResponseObject from "./response-object.js";
import transformSchemaObject from "./schema-object.js";
const transformers = {
    schemas: transformSchemaObject,
    responses: transformResponseObject,
    parameters: transformParameterObject,
    requestBodies: transformRequestBodyObject,
    headers: transformHeaderObject,
    pathItems: transformPathItemObject,
};
export default function transformComponentsObject(componentsObject, ctx) {
    const type = [];
    for (const key of Object.keys(transformers)) {
        const componentT = performance.now();
        const items = [];
        if (componentsObject[key]) {
            for (const [name, item] of getEntries(componentsObject[key], ctx)) {
                const subType = transformers[key](item, {
                    path: createRef(["components", key, name]),
                    ctx,
                });
                const property = ts.factory.createPropertySignature(tsModifiers({ readonly: ctx.immutable }), tsPropertyIndex(name), undefined, subType);
                addJSDocComment(item, property);
                items.push(property);
            }
        }
        type.push(ts.factory.createPropertySignature(undefined, tsPropertyIndex(key), undefined, items.length
            ? ts.factory.createTypeLiteralNode(items)
            : NEVER));
        debug(`Transformed components â†’ ${key}`, "ts", performance.now() - componentT);
    }
    return ts.factory.createTypeLiteralNode(type);
}
//# sourceMappingURL=components-object.js.map